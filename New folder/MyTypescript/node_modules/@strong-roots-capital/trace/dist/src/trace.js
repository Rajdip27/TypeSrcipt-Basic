"use strict";
/**
 * trace
 * tap function to log a value with optional tag
 */
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IOtrace = exports.unsafeTraceJson = exports.trace = void 0;
/**
 * Log `value` with optional `tag` and return `value`.
 */
function trace(logger) {
    var tag = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        tag[_i - 1] = arguments[_i];
    }
    return function trace(value) {
        if (tag.length > 0) {
            logger.apply(void 0, __spread(tag, [value]));
        }
        else {
            logger(value);
        }
        return value;
    };
}
exports.trace = trace;
/**
 * Log `value` as pretty-printed JSON with optional `tag` and return
 * `value`.
 *
 * Note: `JSON.stringify` is unsafe (will throw errors on some input)
 * so this function is unsafe too.
 */
function unsafeTraceJson(logger) {
    var tag = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        tag[_i - 1] = arguments[_i];
    }
    return function trace(value) {
        if (tag.length > 0) {
            logger.apply(void 0, __spread(tag, [JSON.stringify(value, null, 2)]));
        }
        else {
            logger(JSON.stringify(value, null, 2));
        }
        return value;
    };
}
exports.unsafeTraceJson = unsafeTraceJson;
/**
 * Return an IO to log `value` with optional `tag` and return `value`.
 */
function IOtrace(logger) {
    var tag = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        tag[_i - 1] = arguments[_i];
    }
    return function trace(value) {
        return function () {
            if (tag.length > 0) {
                logger.apply(void 0, __spread(tag, [value]));
            }
            else {
                logger(value);
            }
            return value;
        };
    };
}
exports.IOtrace = IOtrace;
//# sourceMappingURL=trace.js.map