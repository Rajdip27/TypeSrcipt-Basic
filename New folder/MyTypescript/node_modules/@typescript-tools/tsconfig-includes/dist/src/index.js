#!/usr/bin/env node
"use strict";
/**
 * tsconfig-includes
 * Enumerate files included by tsconfig.json
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const trace_1 = require("@strong-roots-capital/trace");
const io_ts_1 = require("@typescript-tools/io-ts");
const debug_1 = __importDefault(require("debug"));
const fast_glob_1 = __importDefault(require("fast-glob"));
const Console = __importStar(require("fp-ts/Console"));
const E = __importStar(require("fp-ts/Either"));
const IO = __importStar(require("fp-ts/IO"));
const A = __importStar(require("fp-ts/ReadonlyArray"));
const T = __importStar(require("fp-ts/Task"));
const TE = __importStar(require("fp-ts/TaskEither"));
const function_1 = require("fp-ts/function");
const t = __importStar(require("io-ts"));
const io_ts_docopt_1 = require("io-ts-docopt");
const io_ts_types_1 = require("io-ts-types");
const PathReporter = __importStar(require("io-ts/lib/PathReporter"));
const debug = {
    cmd: (0, debug_1.default)('tsconfig-includes'),
};
const defaultIncludes = () => ['**/*'];
const Includes = t.array(t.string);
const TSConfig = t.type({
    include: (0, io_ts_types_1.withFallback)(Includes, defaultIncludes()),
});
const docstring = `
Usage:
    tsconfig-includes <tsconfig>...

Options:
    tsconfig    Path to tsconfig for which to enumerate included files
`;
const CommandLineOptions = (0, io_ts_docopt_1.withEncode)(t.type({
    '<tsconfig>': (0, io_ts_types_1.nonEmptyArray)(t.string),
}), (a) => ({
    tsconfigs: a['<tsconfig>'],
}));
const decodeDocopt = (0, function_1.flow)(io_ts_docopt_1.decodeDocopt, E.mapLeft((0, function_1.flow)((errors) => PathReporter.failure(errors).join('\n'), (error) => ({ type: 'docopt decode', error }))), TE.fromEither);
const readFile = (filename) => TE.tryCatch(() => __awaiter(void 0, void 0, void 0, function* () {
    return new Promise((resolve, reject) => {
        fs.readFile(filename, 'utf8', (error, data) => {
            if (error !== null && error !== undefined) {
                reject(error);
            }
            else {
                resolve(data);
            }
        });
    });
}), (0, function_1.flow)(E.toError, (error) => ({ type: 'unable to read file', filename, error })));
const readTsconfig = (0, function_1.flow)(readFile, TE.chainW((0, function_1.flow)((0, io_ts_1.StringifiedJSON)(TSConfig).decode.bind(null), E.mapLeft((0, function_1.flow)((errors) => PathReporter.failure(errors).join('\n'), (error) => ({ type: 'unable to parse tsconfig', error }))), TE.fromEither)), TE.map((0, trace_1.trace)(debug.cmd, 'tsconfig')));
const resolveIncludes = (tsconfig) => (includes) => {
    const cwd = path.dirname(tsconfig);
    return (0, function_1.pipe)(TE.tryCatch(() => __awaiter(void 0, void 0, void 0, function* () { return (0, fast_glob_1.default)(includes, { cwd }); }), (0, function_1.flow)(E.toError, (error) => ({
        type: 'unable to resolve globs',
        globs: includes,
        error,
    }))), TE.map(A.map((a) => path.join(cwd, a))));
};
const exit = (code) => () => process.exit(code);
const main = (0, function_1.pipe)(decodeDocopt(CommandLineOptions, docstring, {
    argv: [
        ...process.argv.slice(2),
        // file descriptor '0' is stdin
        ...(!process.stdin.isTTY
            ? fs.readFileSync('/dev/stdin', 'utf-8').trim().split(/\s+/)
            : []),
    ],
}), TE.chain(({ tsconfigs }) => (0, function_1.pipe)(tsconfigs, A.filter((s) => s.length > 0), A.map((tsconfig) => (0, function_1.pipe)(readTsconfig(tsconfig), TE.chainW(({ include }) => resolveIncludes(tsconfig)(include)), TE.chain((0, function_1.flow)(A.map(Console.log), IO.sequenceArray, TE.fromIO)))), TE.sequenceArray)), TE.map(function_1.constVoid), TE.getOrElseW((0, function_1.flow)(Console.error, IO.chain(() => exit(1)), T.fromIO)));
main();
// Local Variables:
// mode: typescript
// End:
//# sourceMappingURL=index.js.map