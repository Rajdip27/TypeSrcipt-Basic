import * as t from 'io-ts';
import { PackageName } from './PackageName';
import { PackageVersion } from './PackageVersion';
export declare const PackageJsonDependencies: t.PartialC<{
    dependencies: t.RecordC<t.BrandC<t.StringC, import("./PackageName").PackageNameBrand>, t.BrandC<t.StringC, import("./PackageVersion").PackageVersionBrand>>;
    devDependencies: t.RecordC<t.BrandC<t.StringC, import("./PackageName").PackageNameBrand>, t.BrandC<t.StringC, import("./PackageVersion").PackageVersionBrand>>;
    optionalDependencies: t.RecordC<t.BrandC<t.StringC, import("./PackageName").PackageNameBrand>, t.BrandC<t.StringC, import("./PackageVersion").PackageVersionBrand>>;
    peerDependencies: t.RecordC<t.BrandC<t.StringC, import("./PackageName").PackageNameBrand>, t.BrandC<t.StringC, import("./PackageVersion").PackageVersionBrand>>;
}>;
export declare type PackageJsonDependencies = t.TypeOf<typeof PackageJsonDependencies>;
export declare const dependencies: (manifest: PackageJsonDependencies) => [PackageName, PackageVersion][];
//# sourceMappingURL=PackageJsonDependencies.d.ts.map