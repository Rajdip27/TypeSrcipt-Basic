"use strict";
/**
 * io-ts-docopt
 * Decode docopt output with io-ts
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeDocopt = exports.withEncode = void 0;
var E = __importStar(require("fp-ts/Either"));
var pipeable_1 = require("fp-ts/pipeable");
var docopt_1 = require("docopt");
var debug_1 = __importDefault(require("debug"));
var withEncode_1 = require("io-ts-types/lib/withEncode");
Object.defineProperty(exports, "withEncode", { enumerable: true, get: function () { return withEncode_1.withEncode; } });
var debug = {
    options: debug_1.default('options'),
};
/**
 * Decode the output of `docopt` with an io-ts codec.
 */
function decodeDocopt(codec, docstring, _a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.argv, argv = _c === void 0 ? process.argv.slice(2) : _c, help = _b.help, version = _b.version, options_first = _b.options_first, exit = _b.exit;
    return pipeable_1.pipe(docopt_1.docopt(docstring, { argv: argv, help: help, version: version, options_first: options_first, exit: exit }), codec.decode.bind(null), E.map(codec.encode.bind(null)), E.map(function (value) { return (debug.options('Arguments', value), value); }));
}
exports.decodeDocopt = decodeDocopt;
//# sourceMappingURL=io-ts-docopt.js.map